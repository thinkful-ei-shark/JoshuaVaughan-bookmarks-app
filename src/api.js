import render from './render';
import store from './store';

// create a variable that equates to the base URL for the API. This is available in the API docs provided.
const BASE_URL = 'https://thinkful-list-api.herokuapp.com/josh';




// Create the generic fetch request function to pull the bookmark list store that is being hosted on the API
// Step 1 - declare a function as a const that takes in a set of arguments and name it listBookmarkApiFetch. This will be used to do error control for the reusable get request.
const listBookmarkApiFetch = function (...args) {
  // setup var in scope outside of promise chain
  let error;
  return fetch(...args)
    .then(res => {
      if (!res.ok) {
        // if response is not 2xx, start building error object
        error = { code: res.status };
    
        // if response is not JSON type, place statusText in error object and
        // immediately reject promise
        if (!res.headers.get('content-type').includes('json')) {
          error.message = res.statusText;
          return Promise.reject(error);
        }
      }
    
      // otherwise, return parsed JSON
      return res.json();
    })
    .then(data => {
      // if error exists, place the JSON message into the error object and 
      // reject the Promise with your error object so it lands in the next 
      // catch.  IMPORTANT: Check how the API sends errors -- not all APIs
      // will respond with a JSON object containing message key
      if (error) {
        error.message = data.message;
        return Promise.reject(error);
      }
    
      // otherwise, return the json as normal resolved Promise
      return data;
    });
};
// Step 2 - utilize the error handler and input validations above to create the shorthand, reusable and referenceable get request function
const getBookmarks = function () {
  listBookmarkApiFetch(`${BASE_URL}/bookmarks`).then(resp => {
    // expanded
    store.bookmarks = resp.map((bookmark) => {
      bookmark.expanded = false;
      return bookmark;
    });
    render.render();
  });
};
// Create the POST function which will call the list and add a new bookmark to the API store
//   Step 1 - declare a function as a const that takes in an object(our bookmark generated by our handleFormSubmit) and call it createApiBookmark
const createApiBookmark = function (obj) {
  // Step 2 - stringify the object being passed as the argument in the function and declare it as a const variable called newBookmark
  const newBookmark = JSON.stringify(obj);
  // Step 3 - create the post structure. Remember, because we are adding in the POST, we cant just generically call our getBookmarks function, as the post acts as an object being passed in. Start with a return of the listBookmarkApiFetch function and pass...
  // I.) a literal string that will act as the relative path of where to post the object. consider your name the store and add a path to go in to the store and access the bookmarks array.
  // II.) place a comma after the string literal and open some curly brackets to begin the object that will be our POST method. 
  return listBookmarkApiFetch(`${BASE_URL}/bookmarks`, {
    // Step 4 - designate your action by listing a property called method and giving it the value of 'POST' (include the single quotes)
    method: 'POST',
    // Step 5 - because this is a post, we need to designate what type of data we are pushing to the API. Create a property called headers with a value of an object. Within that object, create a property called 'Content-Type' and value it as 'application/json'. Include the single quotes where listed.
    headers: {
      'Content-Type': 'application/json'
      // Step 6 - close the object on the next line and add a comma after. on the next line declare another property called body and set it to the value of newBookmark, which is our variable we declared at the beginning of the function. This is essentially the message attachment that the API is going to POST. Close all remaining brackets/parens and add semicolons where needed. !!!!!!DO NOT FORGET TO EXPORT!!!!!!!
    },
    body: newBookmark
  });
};
    




// Create the DELETE function which will remove an object according to its ID from the API store
// Step 1 - declare a new function called deleteBookmark that takes in an id (note this will need an additional funtion to pull the id)
const deleteBookmark = function (id) {
  //Step 2 - Similar to the POST method, we have to structure the GET first so as the access is understood. Only this time, we need to add an endpoint to the path - the id of the bookmark we are removing from the API.
  // !!!!WARNING!!!! This only removes an item from the API - it DOES NOT remove it from the local store unless there are supplemental functions that allow the API to replace the local store's bookmarks array with its' own.
  return listBookmarkApiFetch(BASE_URL + '/bookmarks/' + id, {
    method: 'DELETE'
    //since we are removing the whole object, we need not specify any headers or a body
  });
};





// !!!EXPORT ALL THE FUNCTIONS!!!

export default {
  getBookmarks,
  createApiBookmark,
  deleteBookmark
};